const { Bot } = require('grammy');
require('dotenv').config({path: './config/.env'});
const { start, vacancies, about, vacanciesNext, vacanciesPrev, backtostart } = require('./controllers/command');
const { helpMenu } = require('./utils/buttons');

const bot = new Bot(process.env.BOT_TOKEN);

bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º',
    },
    {
        command: 'faq',
        description: '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
    }, 
    {
        command: 'support',
        description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å',
    }
])


bot.command('start', async(ctx) => {
    await start(ctx);
})

bot.callbackQuery('vacancy-intro', (ctx) => {
    vacancies(ctx);
})

bot.callbackQuery('right-controller', (ctx) => {
    vacanciesNext(ctx);
})

bot.callbackQuery('left-controller', (ctx) => {
    vacanciesPrev(ctx);
})

bot.callbackQuery('back-to-menu', (ctx) => {
    backtostart(ctx);
})

bot.callbackQuery('about-button', (ctx) => {
    about(ctx);
})

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',  async (ctx) => {
    await vacancies(ctx);
})

bot.on('message:text', async (ctx) => {
    await ctx.react('ü§î');
    await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞. ', {
    parse_mode: 'HTML',
    reply_markup: helpMenu
    })

})

bot.start(start);

